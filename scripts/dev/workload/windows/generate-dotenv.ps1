<#
.SYNOPSIS
    Merges nuget.env and keyvault.env into a single .env file.
.DESCRIPTION
    This script combines nuget.env and keyvault.env into a .env file for local development,
    with enhanced error handling and validation.
.PARAMETER OutputPath
    The path where the merged .env file will be saved. Default: '../../../.env'
.PARAMETER NugetEnvPath
    The path to the nuget.env file. Default: '../../../nuget.env'
.PARAMETER KeyvaultEnvPath
    The path to the keyvault.env file. Default: '../../../keyvault.env'
.PARAMETER Force
    Overwrite the existing .env file without prompting.
.EXAMPLE
    ./generate-dotenv.ps1
.EXAMPLE
    ./generate-dotenv.ps1 -OutputPath './custom.env' -Force
.NOTES
	Author: Piergiorgio Vagnozzi | License: MIT
#>

param(
    [string]$OutputPath = (Join-Path $PSScriptRoot "..\..\..\..env"),
    [string]$NugetEnvPath = (Join-Path $PSScriptRoot "..\..\..\nuget.env"),
    [string]$KeyvaultEnvPath = (Join-Path $PSScriptRoot "..\..\..\keyvault.env"),
    [switch]$Force
)

# Import common utilities
. "$PSScriptRoot\..\..\..\common\core-utils.ps1"
. "$PSScriptRoot\..\..\..\common\dev-utils.ps1"

# Check for --help argument
if ($PSBoundParameters.ContainsKey('Help')) {
    Show-DevScriptHelp -scriptName "generate-dotenv.ps1" `
        -usage "./generate-dotenv.ps1 [-OutputPath <path>] [-NugetEnvPath <path>] [-KeyvaultEnvPath <path>] [-Force]" `
        -description "Merges nuget.env and keyvault.env into a single .env file for local development." `
        -parameters @(
            @{ Name = "-OutputPath"; Description = "Path to save the merged .env file. Default: ../../../.env" },
            @{ Name = "-NugetEnvPath"; Description = "Path to the nuget.env file. Default: ../../../nuget.env" },
            @{ Name = "-KeyvaultEnvPath"; Description = "Path to the keyvault.env file. Default: ../../../keyvault.env" },
            @{ Name = "-Force"; Description = "Overwrite the existing .env file without prompting." }
        ) `
        -examples @(
            "./generate-dotenv.ps1",
            "./generate-dotenv.ps1 -OutputPath './custom.env' -Force"
        )
    exit 0
}

Write-InfoMessage "üóÇÔ∏è  Starting .env file generation..."

# Resolve full paths
$outputFullPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($OutputPath)
$nugetFullPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($NugetEnvPath)
$keyvaultFullPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($KeyvaultEnvPath)

# Check if output file already exists
if ((Test-Path $outputFullPath) -and -not $Force.IsPresent) {
    Write-WarningMessage ".env file already exists at: $outputFullPath. Use -Force to overwrite."
    exit 0
}

$envContent = @()
$envContent += "# This file is auto-generated by merging nuget.env and keyvault.env on $(Get-Date)"
$envContent += ""

# Process nuget.env
if (Test-Path $nugetFullPath) {
    Write-InfoMessage "Merging nuget.env..."
    $envContent += Get-Content $nugetFullPath
    $envContent += ""
} else {
    Write-WarningMessage "nuget.env not found at: $nugetFullPath"
}

# Process keyvault.env
if (Test-Path $keyvaultFullPath) {
    Write-InfoMessage "Merging keyvault.env..."
    $envContent += Get-Content $keyvaultFullPath
    $envContent += ""
} else {
    Write-WarningMessage "keyvault.env not found at: $keyvaultFullPath"
}

# Write the merged content
if ($envContent.Count -gt 2) {
    $envContent | Out-File -FilePath $outputFullPath -Encoding UTF8 -Force
    Write-SuccessMessage ".env file generated successfully at: $outputFullPath"
} else {
    Write-WarningMessage "No content to write. Both nuget.env and keyvault.env were not found."
}
