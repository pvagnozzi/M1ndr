name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'

jobs:
  build:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🏗️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: 🔧 Restore dependencies
      run: dotnet restore
    
    - name: 🔨 Build solution
      run: dotnet build --no-restore --configuration Release
    
    - name: 🧪 Run unit tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        flags: unittests
        name: codecov-umbrella

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
    
    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  quality:
    name: 📏 Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🏗️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 🔍 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🏗️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 🎭 Setup Playwright
      uses: microsoft/playwright-github-action@v1
    
    - name: 🔨 Build solution
      run: dotnet build --configuration Release
    
    - name: 🧪 Run E2E tests
      run: dotnet test tests/e2e/ --configuration Release --logger trx --results-directory TestResults
    
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [build, security, quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🏗️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 📦 Pack NuGet packages
      run: dotnet pack --configuration Release --output ./artifacts
    
    - name: 🚀 Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ./artifacts/*
        generate_release_notes: true
